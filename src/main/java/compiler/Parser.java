
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.compiler;

import node.defdecl.*;
import node.expr.constant.*;
import node.expr.operation.*;
import node.vardecl.*;
import node.vardecl.*;
import node.expr.*;
import node.program.*;
import node.stat.*;
import node.pardecl.*;
import node.pardecl.*;
import node.vardecl.*;
import node.body.*;
import java.util.ArrayList;
import node.Type;
import java.util.List;
import node.Stat;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\010\000\002\002\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\002\000\002\021\004" +
    "\000\002\021\002\000\002\020\006\000\002\022\005\000" +
    "\002\022\007\000\002\022\003\000\002\022\005\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\017\011\000\002\017\010\000\002\016\005\000\002\016" +
    "\003\000\002\015\005\000\002\027\005\000\002\027\003" +
    "\000\002\026\003\000\002\026\004\000\002\011\004\000" +
    "\002\011\002\000\002\007\006\000\002\006\004\000\002" +
    "\006\002\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\005\004\000\002\005\010" +
    "\000\002\005\012\000\002\005\010\000\002\005\005\000" +
    "\002\005\021\000\002\031\005\000\002\031\002\000\002" +
    "\032\003\000\002\032\002\000\002\025\005\000\002\025" +
    "\003\000\002\004\005\000\002\004\003\000\002\010\006" +
    "\000\002\010\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\021\005\001\002\000\004\002\247\001" +
    "\002\000\010\013\011\022\ufffd\065\006\001\002\000\010" +
    "\057\246\063\ufff7\064\117\001\002\000\004\063\241\001" +
    "\002\000\010\013\011\022\ufffd\065\006\001\002\000\004" +
    "\065\204\001\002\000\004\022\015\001\002\000\010\013" +
    "\011\022\ufffd\065\006\001\002\000\004\022\ufffe\001\002" +
    "\000\040\004\ufffb\007\ufffb\011\ufffb\023\ufffb\024\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\036\ufffb" +
    "\044\ufffb\053\ufffb\065\ufffb\001\002\000\040\004\032\007" +
    "\024\011\027\023\uffdb\024\020\027\031\030\040\031\035" +
    "\032\022\033\044\034\017\036\037\044\026\053\043\065" +
    "\034\001\002\000\050\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\054\uffe9\057\uffe9\060\uffe9\061\uffe9\063\uffe9" +
    "\067\uffe9\070\uffe9\001\002\000\004\053\162\001\002\000" +
    "\042\004\032\007\024\011\027\023\uffdb\024\020\027\031" +
    "\030\040\031\035\032\022\033\044\034\017\036\037\044" +
    "\026\053\043\056\uffdb\065\157\001\002\000\050\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\063\uffeb\067\uffeb\070\uffeb\001\002\000" +
    "\050\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\043\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5\067\uffb5\070\uffb5" +
    "\001\002\000\004\053\151\001\002\000\004\023\150\001" +
    "\002\000\026\027\031\030\040\031\035\032\022\033\044" +
    "\034\017\036\037\044\026\053\043\065\047\001\002\000" +
    "\026\027\031\030\040\031\035\032\022\033\044\034\017" +
    "\036\037\044\026\053\043\065\047\001\002\000\042\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\060\uffb6\061" +
    "\144\067\uffb6\070\uffb6\001\002\000\050\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\054\uffee\057\uffee\060\uffee" +
    "\061\uffee\063\uffee\067\uffee\070\uffee\001\002\000\004\053" +
    "\131\001\002\000\044\035\060\036\054\037\064\040\062" +
    "\042\055\043\070\045\063\046\056\047\067\050\061\051" +
    "\057\052\066\054\uffc9\060\127\061\uffc9\067\uffc9\070\uffc9" +
    "\001\002\000\054\035\uffb7\036\uffb7\037\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\050\057\120\060\uffb7\062\uffcb\063\ufff7\064" +
    "\117\066\uffcb\067\uffb7\070\uffb7\001\002\000\050\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec\057\uffec" +
    "\060\uffec\061\uffec\063\uffec\067\uffec\070\uffec\001\002\000" +
    "\044\004\ufffc\007\ufffc\011\ufffc\023\ufffc\024\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc\044" +
    "\ufffc\053\ufffc\054\ufffc\056\ufffc\065\ufffc\001\002\000\026" +
    "\027\031\030\040\031\035\032\022\033\044\034\017\036" +
    "\037\044\026\053\043\065\047\001\002\000\050\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\054\uffed\057\uffed" +
    "\060\uffed\061\uffed\063\uffed\067\uffed\070\uffed\001\002\000" +
    "\006\067\112\070\113\001\002\000\006\062\106\066\105" +
    "\001\002\000\026\027\031\030\040\031\035\032\022\033" +
    "\044\034\017\036\037\044\026\053\043\065\047\001\002" +
    "\000\050\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\054\uffea\057\uffea\060\uffea\061\uffea\063\uffea\067\uffea\070" +
    "\uffea\001\002\000\034\035\060\036\054\037\064\040\062" +
    "\042\055\043\070\045\063\046\056\047\067\050\061\051" +
    "\057\052\066\054\065\001\002\000\050\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\063\uffb6\067\uffb6\070\uffb6\001\002\000\052\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\050\054" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\067\uffb7\070\uffb7" +
    "\001\002\000\030\027\031\030\040\031\035\032\022\033" +
    "\044\034\017\036\037\044\026\053\043\054\052\065\047" +
    "\001\002\000\004\054\053\001\002\000\050\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\063\uffc7\067\uffc7\070\uffc7\001\002\000\050" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\063\uffc8\067\uffc8\070\uffc8\001" +
    "\002\000\026\027\031\030\040\031\035\032\022\033\044" +
    "\034\017\036\037\044\026\053\043\065\047\001\002\000" +
    "\026\027\031\030\040\031\035\032\022\033\044\034\017" +
    "\036\037\044\026\053\043\065\047\001\002\000\026\027" +
    "\031\030\040\031\035\032\022\033\044\034\017\036\037" +
    "\044\026\053\043\065\047\001\002\000\026\027\031\030" +
    "\040\031\035\032\022\033\044\034\017\036\037\044\026" +
    "\053\043\065\047\001\002\000\026\027\031\030\040\031" +
    "\035\032\022\033\044\034\017\036\037\044\026\053\043" +
    "\065\047\001\002\000\026\027\031\030\040\031\035\032" +
    "\022\033\044\034\017\036\037\044\026\053\043\065\047" +
    "\001\002\000\026\027\031\030\040\031\035\032\022\033" +
    "\044\034\017\036\037\044\026\053\043\065\047\001\002" +
    "\000\026\027\031\030\040\031\035\032\022\033\044\034" +
    "\017\036\037\044\026\053\043\065\047\001\002\000\026" +
    "\027\031\030\040\031\035\032\022\033\044\034\017\036" +
    "\037\044\026\053\043\065\047\001\002\000\050\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\042\uffba\043\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\057\uffba" +
    "\060\uffba\061\uffba\063\uffba\067\uffba\070\uffba\001\002\000" +
    "\026\027\031\030\040\031\035\032\022\033\044\034\017" +
    "\036\037\044\026\053\043\065\047\001\002\000\026\027" +
    "\031\030\040\031\035\032\022\033\044\034\017\036\037" +
    "\044\026\053\043\065\047\001\002\000\026\027\031\030" +
    "\040\031\035\032\022\033\044\034\017\036\037\044\026" +
    "\053\043\065\047\001\002\000\050\035\060\036\054\037" +
    "\064\040\062\042\055\043\uffc1\045\063\046\056\047\067" +
    "\050\061\051\057\052\066\054\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\063\uffc1\067\uffc1\070\uffc1\001\002\000\050\035\060" +
    "\036\054\037\064\040\062\042\uffbe\043\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\063\uffbe\067\uffbe\070\uffbe\001\002\000" +
    "\050\035\060\036\054\037\064\040\062\042\uffbb\043\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\063\uffbb\067\uffbb\070\uffbb" +
    "\001\002\000\050\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042" +
    "\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\054\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4\067" +
    "\uffc4\070\uffc4\001\002\000\050\035\060\036\054\037\064" +
    "\040\062\042\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\054\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\063\uffc0\067\uffc0\070\uffc0\001\002\000\050\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\063\uffc3\067\uffc3\070\uffc3\001\002\000\050" +
    "\035\060\036\054\037\064\040\062\042\uffbd\043\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\063\uffbd\067\uffbd\070\uffbd\001" +
    "\002\000\050\035\uffc6\036\uffc6\037\064\040\062\042\uffc6" +
    "\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\054\uffc6\057\uffc6\060\uffc6\061\uffc6\063\uffc6\067\uffc6" +
    "\070\uffc6\001\002\000\050\035\060\036\054\037\064\040" +
    "\062\042\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\057\uffbc\060\uffbc\061\uffbc\063" +
    "\uffbc\067\uffbc\070\uffbc\001\002\000\050\035\060\036\054" +
    "\037\064\040\062\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\063\uffbf\067\uffbf\070\uffbf\001\002\000\050\035" +
    "\060\036\054\037\064\040\062\042\uffc2\043\uffc2\045\063" +
    "\046\056\047\067\050\061\051\057\052\066\054\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\063\uffc2\067\uffc2\070\uffc2\001\002" +
    "\000\050\035\uffc5\036\uffc5\037\064\040\062\042\uffc5\043" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\054\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\067\uffc5\070" +
    "\uffc5\001\002\000\004\061\111\001\002\000\026\027\031" +
    "\030\040\031\035\032\022\033\044\034\017\036\037\044" +
    "\026\053\043\065\047\001\002\000\004\061\110\001\002" +
    "\000\042\004\uffd7\007\uffd7\011\uffd7\023\uffd7\024\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7" +
    "\044\uffd7\053\uffd7\056\uffd7\065\uffd7\001\002\000\042\004" +
    "\uffda\007\uffda\011\uffda\023\uffda\024\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\044\uffda\053" +
    "\uffda\056\uffda\065\uffda\001\002\000\004\061\115\001\002" +
    "\000\004\061\114\001\002\000\042\004\uffd8\007\uffd8\011" +
    "\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\036\uffd8\044\uffd8\053\uffd8\056\uffd8\065" +
    "\uffd8\001\002\000\042\004\uffd9\007\uffd9\011\uffd9\023\uffd9" +
    "\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\036\uffd9\044\uffd9\053\uffd9\056\uffd9\065\uffd9\001\002" +
    "\000\050\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\054\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\067\uffb9\070" +
    "\uffb9\001\002\000\026\027\031\030\040\031\035\032\022" +
    "\033\044\034\017\036\037\044\026\053\043\065\047\001" +
    "\002\000\004\065\121\001\002\000\014\057\120\062\uffcb" +
    "\063\ufff7\064\117\066\uffcb\001\002\000\004\063\ufff9\001" +
    "\002\000\006\062\uffcc\066\uffcc\001\002\000\036\035\060" +
    "\036\054\037\064\040\062\042\055\043\070\045\063\046" +
    "\056\047\067\050\061\051\057\052\066\057\125\063\ufff6" +
    "\001\002\000\004\065\006\001\002\000\004\063\ufff8\001" +
    "\002\000\026\027\031\030\040\031\035\032\022\033\044" +
    "\034\017\036\037\044\026\053\043\065\047\001\002\000" +
    "\012\054\uffca\061\uffca\067\uffca\070\uffca\001\002\000\026" +
    "\027\031\030\040\031\035\032\022\033\044\034\017\036" +
    "\037\044\026\053\043\065\047\001\002\000\034\035\060" +
    "\036\054\037\064\040\062\042\055\043\070\045\063\046" +
    "\056\047\067\050\061\051\057\052\066\054\133\001\002" +
    "\000\004\005\134\001\002\000\004\055\135\001\002\000" +
    "\040\004\ufffb\007\ufffb\011\ufffb\024\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\036\ufffb\044\ufffb\053" +
    "\ufffb\056\ufffb\065\ufffb\001\002\000\044\004\uffd5\006\137" +
    "\007\uffd5\011\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5\044\uffd5\053\uffd5" +
    "\056\uffd5\065\uffd5\001\002\000\004\055\135\001\002\000" +
    "\042\004\uffd4\007\uffd4\011\uffd4\023\uffd4\024\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\044" +
    "\uffd4\053\uffd4\056\uffd4\065\uffd4\001\002\000\040\004\032" +
    "\007\024\011\027\024\020\027\031\030\040\031\035\032" +
    "\022\033\044\034\017\036\037\044\026\053\043\056\uffdb" +
    "\065\034\001\002\000\004\056\143\001\002\000\052\004" +
    "\uffdd\006\uffdd\007\uffdd\011\uffdd\013\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\036\uffdd\044\uffdd\053\uffdd\056\uffdd\065\uffdd" +
    "\001\002\000\042\004\uffd6\007\uffd6\011\uffd6\023\uffd6\024" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\044\uffd6\053\uffd6\056\uffd6\065\uffd6\001\002\000" +
    "\034\035\060\036\054\037\064\040\062\042\055\043\070" +
    "\045\063\046\056\047\067\050\061\051\057\052\066\061" +
    "\146\001\002\000\042\004\uffd2\007\uffd2\011\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\044\uffd2\053\uffd2\056\uffd2\065\uffd2\001\002" +
    "\000\050\035\060\036\054\037\064\040\062\042\uffb8\043" +
    "\uffb8\045\063\046\056\047\067\050\061\051\057\052\066" +
    "\054\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\067\uffb8\070" +
    "\uffb8\001\002\000\004\002\001\001\002\000\026\027\031" +
    "\030\040\031\035\032\022\033\044\034\017\036\037\044" +
    "\026\053\043\065\047\001\002\000\034\035\060\036\054" +
    "\037\064\040\062\042\055\043\070\045\063\046\056\047" +
    "\067\050\061\051\057\052\066\054\153\001\002\000\004" +
    "\010\154\001\002\000\004\055\135\001\002\000\042\004" +
    "\uffd3\007\uffd3\011\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\044\uffd3\053" +
    "\uffd3\056\uffd3\065\uffd3\001\002\000\006\023\uffdc\056\uffdc" +
    "\001\002\000\050\035\uffb7\036\uffb7\037\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\050\057\160\060\uffb7\062\uffcb\066\uffcb\067" +
    "\uffb7\070\uffb7\001\002\000\004\065\161\001\002\000\010" +
    "\057\160\062\uffcb\066\uffcb\001\002\000\006\054\ufffb\065" +
    "\ufffb\001\002\000\006\054\164\065\006\001\002\000\004" +
    "\010\165\001\002\000\004\055\135\001\002\000\004\025" +
    "\167\001\002\000\004\053\170\001\002\000\030\027\031" +
    "\030\040\031\035\032\022\033\044\034\017\036\037\044" +
    "\026\053\043\054\uffcd\065\047\001\002\000\034\035\060" +
    "\036\054\037\064\040\062\042\055\043\070\045\063\046" +
    "\056\047\067\050\061\051\057\052\066\054\uffce\001\002" +
    "\000\004\054\173\001\002\000\004\026\174\001\002\000" +
    "\004\053\175\001\002\000\006\054\uffcf\065\161\001\002" +
    "\000\004\062\202\001\002\000\004\054\200\001\002\000" +
    "\004\061\201\001\002\000\042\004\uffd1\007\uffd1\011\uffd1" +
    "\023\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\036\uffd1\044\uffd1\053\uffd1\056\uffd1\065\uffd1" +
    "\001\002\000\026\027\031\030\040\031\035\032\022\033" +
    "\044\034\017\036\037\044\026\053\043\065\047\001\002" +
    "\000\004\054\uffd0\001\002\000\004\053\205\001\002\000" +
    "\010\012\211\054\213\065\206\001\002\000\006\060\uffe1" +
    "\063\uffe1\001\002\000\004\063\236\001\002\000\006\060" +
    "\234\063\uffe2\001\002\000\004\065\233\001\002\000\004" +
    "\054\230\001\002\000\006\055\uffde\063\217\001\002\000" +
    "\006\054\uffe5\061\215\001\002\000\006\012\211\065\206" +
    "\001\002\000\004\054\uffe6\001\002\000\014\014\227\015" +
    "\225\016\224\017\222\020\226\001\002\000\004\055\135" +
    "\001\002\000\010\013\uffe7\022\uffe7\065\uffe7\001\002\000" +
    "\010\054\ufff0\055\ufff0\061\ufff0\001\002\000\004\055\uffdf" +
    "\001\002\000\010\054\ufff1\055\ufff1\061\ufff1\001\002\000" +
    "\010\054\ufff2\055\ufff2\061\ufff2\001\002\000\010\054\uffef" +
    "\055\uffef\061\uffef\001\002\000\010\054\ufff3\055\ufff3\061" +
    "\ufff3\001\002\000\006\055\uffde\063\217\001\002\000\004" +
    "\055\135\001\002\000\010\013\uffe8\022\uffe8\065\uffe8\001" +
    "\002\000\006\060\uffe0\063\uffe0\001\002\000\006\012\211" +
    "\065\206\001\002\000\004\063\uffe3\001\002\000\014\014" +
    "\227\015\225\016\224\017\222\020\226\001\002\000\006" +
    "\054\uffe4\061\uffe4\001\002\000\004\022\uffff\001\002\000" +
    "\030\014\227\015\225\016\224\017\222\020\226\027\031" +
    "\030\040\031\035\032\022\033\044\034\017\001\002\000" +
    "\004\061\ufff5\001\002\000\004\061\245\001\002\000\004" +
    "\061\ufff4\001\002\000\050\004\ufffa\007\ufffa\011\ufffa\013" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\036\ufffa\044\ufffa\053\ufffa\054" +
    "\ufffa\056\ufffa\065\ufffa\001\002\000\004\065\006\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\017\012\020\007\022\006\024\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\012\020\007\022" +
    "\006\024\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\012\020\007\022\006\024\013\001\001\000" +
    "\002\001\001\000\004\021\015\001\001\000\024\003\032" +
    "\004\040\005\020\006\024\010\027\014\022\020\035\022" +
    "\006\025\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\032\004\040\005\020\006\155\010\027\014" +
    "\022\025\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\146\010" +
    "\045\014\022\001\001\000\010\003\144\010\045\014\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\115\010\045\014\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\044\010\045\014\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\032\004\050\010\045\014\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\103\010\045\014\022\001\001\000\010\003\102\010" +
    "\045\014\022\001\001\000\010\003\101\010\045\014\022" +
    "\001\001\000\010\003\100\010\045\014\022\001\001\000" +
    "\010\003\077\010\045\014\022\001\001\000\010\003\076" +
    "\010\045\014\022\001\001\000\010\003\075\010\045\014" +
    "\022\001\001\000\010\003\074\010\045\014\022\001\001" +
    "\000\010\003\073\010\045\014\022\001\001\000\002\001" +
    "\001\000\010\003\072\010\045\014\022\001\001\000\010" +
    "\003\071\010\045\014\022\001\001\000\010\003\070\010" +
    "\045\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\032\004\106\010\045" +
    "\014\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\123\010\045\014\022\001\001\000\006\022\121\025\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\125\001\001\000\002" +
    "\001\001\000\012\003\032\004\127\010\045\014\022\001" +
    "\001\000\002\001\001\000\010\003\131\010\045\014\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\135\001\001\000\004\021\140\001\001\000\002\001\001" +
    "\000\004\007\137\001\001\000\002\001\001\000\024\003" +
    "\032\004\040\005\020\006\141\010\027\014\022\020\035" +
    "\022\006\025\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\151\010" +
    "\045\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\122\001\001\000\002" +
    "\001\001\000\004\021\162\001\001\000\006\020\035\022" +
    "\006\001\001\000\002\001\001\000\004\007\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\170\010" +
    "\045\014\022\032\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\175\031\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\032\004" +
    "\202\010\045\014\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\213\016\211\026\207\027\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\217\001" +
    "\001\000\002\001\001\000\012\015\213\016\215\026\207" +
    "\027\206\001\001\000\002\001\001\000\004\013\222\001" +
    "\001\000\004\007\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\230" +
    "\001\001\000\004\007\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\207\027\234\001\001\000\002" +
    "\001\001\000\004\013\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\242\013\241\014\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\121\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOp RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Decl> decls = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> vars = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProgramOp(decls,vars,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,var); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefDecl func = (DefDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,func); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<Decl> RESULT =null;
		 ArrayList<Decl> list =new ArrayList<>(); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDecl> list = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(var); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		 ArrayList<VarDecl> list= new ArrayList<>(); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              VarDecl RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VarInit> vars = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeOrCostantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOrCostantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object typeOrCostant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(vars, typeOrCostant); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarInit> list = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new VarInit( new Identifier(id))); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarInit> list = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add( new VarInit(new Identifier(id),expr)); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VarInit> list = new ArrayList<>(); list.add(new VarInit( new Identifier(id))); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VarInit> list = new ArrayList<>(); list.add(new VarInit( new Identifier(id),expr)); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr constant = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=constant;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT=Type.INTEGER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Type RESULT =null;
		RESULT=Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT=Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Type RESULT =null;
		RESULT=Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Type RESULT =null;
		RESULT=Type.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Expr RESULT =null;
		int inttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int intt = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerNode(intt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		int doubleeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doubleeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double doublee = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DoubleNode(doublee);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char charr = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharNode(charr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stringg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(stringg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<ParDecl> params = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new DefDecl(params, new Identifier(id),type,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new DefDecl(new Identifier(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParDecl> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParDecl declaration = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDecl> list = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParDecl)declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl declaration = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ParDecl> list = new ArrayList<>(); list.add(declaration); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              ParDecl RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParVar> list = (ArrayList<ParVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParDecl(type,list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<ParVar> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParVar pvar = (ParVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParVar> list = (ArrayList<ParVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(pvar); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<ParVar> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParVar pvar = (ParVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParVar> list = new ArrayList<>(); list.add(pvar); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              ParVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParVar(false, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              ParVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParVar(true, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ty;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOp RESULT =null;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> declarations = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> statements = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new BodyOp(declarations,statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              ArrayList<Stat> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat statement = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0,(Stat) statement); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              ArrayList<Stat> RESULT =null;
		 ArrayList<Stat> list = new ArrayList<Stat>(); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              Stat RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> vars_list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new ReadOp(vars_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              Stat RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new WriteOp(expression_list,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              Stat RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new WriteOp(expression_list,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Identifier> vars_list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignOp(vars_list,expression_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int function_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int function_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCall function_call = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=function_call;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp ifBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IfThenNode(expression,ifBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BodyOp ifBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp elseBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenElse(expression,ifBody,elseBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int whileBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp whileBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new WhileOp(expression,whileBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new ReturnStat(exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= INIT LPAR VarDecls RPAR DO Body FOR LPAR Expr2 RPAR STEP LPAR AssignSt RPAR SEMI 
            {
              Stat RESULT =null;
		int initVarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int initVarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		ArrayList<VarDecl> initVars = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int doBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int doBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		BodyOp doBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AssignOp a = (AssignOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InitDoForStep(initVars, doBody, condition, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AssignSt ::= Vars ASSIGN Exprs 
            {
              AssignOp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> v = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AssignOp((ArrayList<Identifier>) v, (ArrayList<Expr>) exprs);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignSt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssignSt ::= 
            {
              AssignOp RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignSt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr2 ::= Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expr) e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr2 ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Vars ::= ID PIPE Vars 
            {
              ArrayList<Identifier> RESULT =null;
		int id_attrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_attrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_attr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new Identifier(id_attr)); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Vars ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Identifier> list = new ArrayList<Identifier>(); list.add(new Identifier(id_attrib)); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr attrib = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add((Expr) attrib); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr attrib = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Expr> list=new ArrayList<Expr>(); list.add((Expr) attrib); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCall RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> ref = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FunCall(new Identifier(id_attrib), ref);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FunCall ::= ID LPAR RPAR 
            {
              FunCall RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new FunCall(new Identifier(id_attrib));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"PLUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"MINUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"TIMES",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"DIV",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"AND",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"OR",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"GT",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"GE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"LT",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"LE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"EQ",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"NE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new UnaryOp("MINUS",e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new UnaryOp("NOT",e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Identifier(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCall e1 = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Constant 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
