
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.compiler;

import node.defdecl.*;
import node.expr.constant.*;
import node.expr.operation.*;
import node.vardecl.*;
import node.vardecl.*;
import node.expr.*;
import node.program.*;
import node.stat.*;
import node.pardecl.*;
import node.pardecl.*;
import node.vardecl.*;
import node.body.*;
import java.util.ArrayList;
import node.Type;
import java.util.List;
import node.Stat;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\010\000\002\002\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\002" +
    "\000\002\020\010\000\002\020\007\000\002\022\004\000" +
    "\002\022\002\000\002\021\006\000\002\023\005\000\002" +
    "\023\007\000\002\023\003\000\002\023\005\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\017\011\000\002\017\010\000\002\016\005\000" +
    "\002\016\003\000\002\015\005\000\002\030\005\000\002" +
    "\030\003\000\002\027\003\000\002\027\004\000\002\011" +
    "\004\000\002\011\002\000\002\007\006\000\002\006\004" +
    "\000\002\006\002\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\006\000\002\005\004\000\002" +
    "\005\010\000\002\005\012\000\002\005\010\000\002\005" +
    "\005\000\002\026\005\000\002\026\003\000\002\004\005" +
    "\000\002\004\003\000\002\010\006\000\002\010\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\023\005\001\002\000\004\002\242\001" +
    "\002\000\012\013\011\014\013\024\ufffc\067\006\001\002" +
    "\000\010\061\241\065\ufff4\066\123\001\002\000\004\065" +
    "\234\001\002\000\012\013\011\014\013\024\ufffc\067\006" +
    "\001\002\000\004\067\220\001\002\000\012\013\011\014" +
    "\013\024\ufffc\067\006\001\002\000\004\067\166\001\002" +
    "\000\004\024\017\001\002\000\012\013\011\014\013\024" +
    "\ufffc\067\006\001\002\000\004\024\ufffe\001\002\000\044" +
    "\004\ufff8\007\ufff8\011\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\040\ufff8\046\ufff8\055\ufff8\067\ufff8\001\002\000\044\004" +
    "\035\007\026\011\031\025\uffd4\026\034\027\043\030\037" +
    "\031\021\032\032\033\041\034\024\035\050\036\022\040" +
    "\044\046\030\055\047\067\040\001\002\000\050\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\065\uffe3\071\uffe3\072\uffe3\001\002\000" +
    "\050\037\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\056" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\071\uffe5\072\uffe5" +
    "\001\002\000\046\004\035\007\026\011\031\025\uffd4\026" +
    "\034\027\043\030\037\031\021\032\032\033\041\034\024" +
    "\035\050\036\022\040\044\046\030\055\047\060\uffd4\067" +
    "\163\001\002\000\050\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\056\uffe7\061\uffe7\062\uffe7\063\uffe7\065\uffe7" +
    "\071\uffe7\072\uffe7\001\002\000\050\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\056\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\065\uffb3\071\uffb3\072\uffb3\001\002\000\004\055\155" +
    "\001\002\000\004\025\154\001\002\000\034\026\034\027" +
    "\043\030\037\031\021\032\032\033\041\034\024\035\050" +
    "\036\022\040\044\046\030\055\047\067\053\001\002\000" +
    "\034\026\034\027\043\030\037\031\021\032\032\033\041" +
    "\034\024\035\050\036\022\040\044\046\030\055\047\067" +
    "\053\001\002\000\050\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2" +
    "\071\uffe2\072\uffe2\001\002\000\042\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\062\uffb4\063\150\071\uffb4\072" +
    "\uffb4\001\002\000\050\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\044\uffea\045\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\056\uffea\061\uffea\062\uffea\063\uffea\065\uffea" +
    "\071\uffea\072\uffea\001\002\000\004\055\135\001\002\000" +
    "\044\037\063\040\060\041\070\042\066\044\061\045\074" +
    "\047\067\050\062\051\073\052\065\053\064\054\072\056" +
    "\uffc7\062\133\063\uffc7\071\uffc7\072\uffc7\001\002\000\050" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\065\uffe4\071\uffe4\072\uffe4\001" +
    "\002\000\054\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5" +
    "\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\054\061\124\062\uffb5\064\uffc9\065\ufff4\066\123" +
    "\070\uffc9\071\uffb5\072\uffb5\001\002\000\050\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\065\uffe8\071\uffe8\072\uffe8\001\002\000\046" +
    "\004\ufff9\007\ufff9\011\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\040\ufff9\046\ufff9\055\ufff9\060\ufff9\067\ufff9\001\002\000" +
    "\050\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\056" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\065\uffe9\071\uffe9\072\uffe9" +
    "\001\002\000\034\026\034\027\043\030\037\031\021\032" +
    "\032\033\041\034\024\035\050\036\022\040\044\046\030" +
    "\055\047\067\053\001\002\000\006\071\116\072\117\001" +
    "\002\000\006\064\112\070\111\001\002\000\034\026\034" +
    "\027\043\030\037\031\021\032\032\033\041\034\024\035" +
    "\050\036\022\040\044\046\030\055\047\067\053\001\002" +
    "\000\050\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\056\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\071\uffe6\072" +
    "\uffe6\001\002\000\034\037\063\040\060\041\070\042\066" +
    "\044\061\045\074\047\067\050\062\051\073\052\065\053" +
    "\064\054\072\056\071\001\002\000\050\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\056\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\065\uffb4\071\uffb4\072\uffb4\001\002\000\052\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\054\056" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5\071\uffb5\072\uffb5" +
    "\001\002\000\036\026\034\027\043\030\037\031\021\032" +
    "\032\033\041\034\024\035\050\036\022\040\044\046\030" +
    "\055\047\056\056\067\053\001\002\000\004\056\057\001" +
    "\002\000\050\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\056\uffc5\061\uffc5\062\uffc5\063\uffc5\065\uffc5\071\uffc5" +
    "\072\uffc5\001\002\000\050\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6\065" +
    "\uffc6\071\uffc6\072\uffc6\001\002\000\034\026\034\027\043" +
    "\030\037\031\021\032\032\033\041\034\024\035\050\036" +
    "\022\040\044\046\030\055\047\067\053\001\002\000\034" +
    "\026\034\027\043\030\037\031\021\032\032\033\041\034" +
    "\024\035\050\036\022\040\044\046\030\055\047\067\053" +
    "\001\002\000\034\026\034\027\043\030\037\031\021\032" +
    "\032\033\041\034\024\035\050\036\022\040\044\046\030" +
    "\055\047\067\053\001\002\000\034\026\034\027\043\030" +
    "\037\031\021\032\032\033\041\034\024\035\050\036\022" +
    "\040\044\046\030\055\047\067\053\001\002\000\034\026" +
    "\034\027\043\030\037\031\021\032\032\033\041\034\024" +
    "\035\050\036\022\040\044\046\030\055\047\067\053\001" +
    "\002\000\034\026\034\027\043\030\037\031\021\032\032" +
    "\033\041\034\024\035\050\036\022\040\044\046\030\055" +
    "\047\067\053\001\002\000\034\026\034\027\043\030\037" +
    "\031\021\032\032\033\041\034\024\035\050\036\022\040" +
    "\044\046\030\055\047\067\053\001\002\000\034\026\034" +
    "\027\043\030\037\031\021\032\032\033\041\034\024\035" +
    "\050\036\022\040\044\046\030\055\047\067\053\001\002" +
    "\000\034\026\034\027\043\030\037\031\021\032\032\033" +
    "\041\034\024\035\050\036\022\040\044\046\030\055\047" +
    "\067\053\001\002\000\050\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8\065" +
    "\uffb8\071\uffb8\072\uffb8\001\002\000\034\026\034\027\043" +
    "\030\037\031\021\032\032\033\041\034\024\035\050\036" +
    "\022\040\044\046\030\055\047\067\053\001\002\000\034" +
    "\026\034\027\043\030\037\031\021\032\032\033\041\034" +
    "\024\035\050\036\022\040\044\046\030\055\047\067\053" +
    "\001\002\000\034\026\034\027\043\030\037\031\021\032" +
    "\032\033\041\034\024\035\050\036\022\040\044\046\030" +
    "\055\047\067\053\001\002\000\050\037\063\040\060\041" +
    "\070\042\066\044\061\045\uffbf\047\067\050\062\051\073" +
    "\052\065\053\064\054\072\056\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\065\uffbf\071\uffbf\072\uffbf\001\002\000\050\037\063" +
    "\040\060\041\070\042\066\044\uffbc\045\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\056\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\065\uffbc\071\uffbc\072\uffbc\001\002\000" +
    "\050\037\063\040\060\041\070\042\066\044\uffb9\045\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\056" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9\071\uffb9\072\uffb9" +
    "\001\002\000\050\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044" +
    "\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\056\uffc2\061\uffc2\062\uffc2\063\uffc2\065\uffc2\071" +
    "\uffc2\072\uffc2\001\002\000\050\037\063\040\060\041\070" +
    "\042\066\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\056\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\065\uffbe\071\uffbe\072\uffbe\001\002\000\050\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\056\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\065\uffc1\071\uffc1\072\uffc1\001\002\000\050" +
    "\037\063\040\060\041\070\042\066\044\uffbb\045\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\056\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\065\uffbb\071\uffbb\072\uffbb\001" +
    "\002\000\050\037\063\040\060\041\070\042\066\044\uffba" +
    "\045\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\056\uffba\061\uffba\062\uffba\063\uffba\065\uffba\071\uffba" +
    "\072\uffba\001\002\000\050\037\uffc4\040\uffc4\041\070\042" +
    "\066\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\056\uffc4\061\uffc4\062\uffc4\063\uffc4\065" +
    "\uffc4\071\uffc4\072\uffc4\001\002\000\050\037\063\040\060" +
    "\041\070\042\066\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\056\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\065\uffbd\071\uffbd\072\uffbd\001\002\000\050\037" +
    "\063\040\060\041\070\042\066\044\uffc0\045\uffc0\047\067" +
    "\050\062\051\073\052\065\053\064\054\072\056\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\065\uffc0\071\uffc0\072\uffc0\001\002" +
    "\000\050\037\uffc3\040\uffc3\041\070\042\066\044\uffc3\045" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\056\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\071\uffc3\072" +
    "\uffc3\001\002\000\004\063\115\001\002\000\034\026\034" +
    "\027\043\030\037\031\021\032\032\033\041\034\024\035" +
    "\050\036\022\040\044\046\030\055\047\067\053\001\002" +
    "\000\004\063\114\001\002\000\046\004\uffd0\007\uffd0\011" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\046\uffd0\055" +
    "\uffd0\060\uffd0\067\uffd0\001\002\000\046\004\uffd3\007\uffd3" +
    "\011\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\046\uffd3" +
    "\055\uffd3\060\uffd3\067\uffd3\001\002\000\004\063\121\001" +
    "\002\000\004\063\120\001\002\000\046\004\uffd1\007\uffd1" +
    "\011\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\046\uffd1" +
    "\055\uffd1\060\uffd1\067\uffd1\001\002\000\046\004\uffd2\007" +
    "\uffd2\011\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\046" +
    "\uffd2\055\uffd2\060\uffd2\067\uffd2\001\002\000\050\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\056\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\065\uffb7\071\uffb7\072\uffb7\001\002\000" +
    "\034\026\034\027\043\030\037\031\021\032\032\033\041" +
    "\034\024\035\050\036\022\040\044\046\030\055\047\067" +
    "\053\001\002\000\004\067\125\001\002\000\014\061\124" +
    "\064\uffc9\065\ufff4\066\123\070\uffc9\001\002\000\004\065" +
    "\ufff6\001\002\000\006\064\uffca\070\uffca\001\002\000\036" +
    "\037\063\040\060\041\070\042\066\044\061\045\074\047" +
    "\067\050\062\051\073\052\065\053\064\054\072\061\131" +
    "\065\ufff3\001\002\000\004\067\006\001\002\000\004\065" +
    "\ufff5\001\002\000\034\026\034\027\043\030\037\031\021" +
    "\032\032\033\041\034\024\035\050\036\022\040\044\046" +
    "\030\055\047\067\053\001\002\000\012\056\uffc8\063\uffc8" +
    "\071\uffc8\072\uffc8\001\002\000\034\026\034\027\043\030" +
    "\037\031\021\032\032\033\041\034\024\035\050\036\022" +
    "\040\044\046\030\055\047\067\053\001\002\000\034\037" +
    "\063\040\060\041\070\042\066\044\061\045\074\047\067" +
    "\050\062\051\073\052\065\053\064\054\072\056\137\001" +
    "\002\000\004\005\140\001\002\000\004\057\141\001\002" +
    "\000\044\004\ufff8\007\ufff8\011\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\040\ufff8\046\ufff8\055\ufff8\060\ufff8\067\ufff8\001\002\000" +
    "\050\004\uffce\006\143\007\uffce\011\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\040\uffce\046\uffce\055\uffce\060\uffce\067\uffce" +
    "\001\002\000\004\057\141\001\002\000\046\004\uffcd\007" +
    "\uffcd\011\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\046" +
    "\uffcd\055\uffcd\060\uffcd\067\uffcd\001\002\000\044\004\035" +
    "\007\026\011\031\026\034\027\043\030\037\031\021\032" +
    "\032\033\041\034\024\035\050\036\022\040\044\046\030" +
    "\055\047\060\uffd4\067\040\001\002\000\004\060\147\001" +
    "\002\000\056\004\uffd6\006\uffd6\007\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6" +
    "\046\uffd6\055\uffd6\060\uffd6\067\uffd6\001\002\000\046\004" +
    "\uffcf\007\uffcf\011\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040" +
    "\uffcf\046\uffcf\055\uffcf\060\uffcf\067\uffcf\001\002\000\034" +
    "\037\063\040\060\041\070\042\066\044\061\045\074\047" +
    "\067\050\062\051\073\052\065\053\064\054\072\063\152" +
    "\001\002\000\046\004\uffcb\007\uffcb\011\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\040\uffcb\046\uffcb\055\uffcb\060\uffcb\067" +
    "\uffcb\001\002\000\050\037\063\040\060\041\070\042\066" +
    "\044\uffb6\045\uffb6\047\067\050\062\051\073\052\065\053" +
    "\064\054\072\056\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6" +
    "\071\uffb6\072\uffb6\001\002\000\004\002\001\001\002\000" +
    "\034\026\034\027\043\030\037\031\021\032\032\033\041" +
    "\034\024\035\050\036\022\040\044\046\030\055\047\067" +
    "\053\001\002\000\034\037\063\040\060\041\070\042\066" +
    "\044\061\045\074\047\067\050\062\051\073\052\065\053" +
    "\064\054\072\056\157\001\002\000\004\010\160\001\002" +
    "\000\004\057\141\001\002\000\046\004\uffcc\007\uffcc\011" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\046\uffcc\055" +
    "\uffcc\060\uffcc\067\uffcc\001\002\000\006\025\uffd5\060\uffd5" +
    "\001\002\000\050\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044" +
    "\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\054\061\164\062\uffb5\064\uffc9\070\uffc9\071" +
    "\uffb5\072\uffb5\001\002\000\004\067\165\001\002\000\010" +
    "\061\164\064\uffc9\070\uffc9\001\002\000\004\055\167\001" +
    "\002\000\010\012\173\056\175\067\170\001\002\000\006" +
    "\062\uffda\065\uffda\001\002\000\004\065\207\001\002\000" +
    "\006\062\205\065\uffdb\001\002\000\004\067\204\001\002" +
    "\000\004\056\202\001\002\000\004\057\141\001\002\000" +
    "\006\056\uffde\063\177\001\002\000\006\012\173\067\170" +
    "\001\002\000\004\056\uffdf\001\002\000\012\013\ufffa\014" +
    "\ufffa\024\ufffa\067\ufffa\001\002\000\004\057\141\001\002" +
    "\000\012\013\ufffb\014\ufffb\024\ufffb\067\ufffb\001\002\000" +
    "\006\062\uffd9\065\uffd9\001\002\000\006\012\173\067\170" +
    "\001\002\000\004\065\uffdc\001\002\000\016\015\216\016" +
    "\214\017\213\020\212\021\215\022\210\001\002\000\010" +
    "\056\uffeb\057\uffeb\063\uffeb\001\002\000\006\056\uffdd\063" +
    "\uffdd\001\002\000\010\056\uffed\057\uffed\063\uffed\001\002" +
    "\000\010\056\uffee\057\uffee\063\uffee\001\002\000\010\056" +
    "\uffef\057\uffef\063\uffef\001\002\000\010\056\uffec\057\uffec" +
    "\063\uffec\001\002\000\010\056\ufff0\057\ufff0\063\ufff0\001" +
    "\002\000\004\024\uffff\001\002\000\004\055\221\001\002" +
    "\000\010\012\173\056\223\067\170\001\002\000\004\056" +
    "\230\001\002\000\006\057\uffd7\065\224\001\002\000\016" +
    "\015\216\016\214\017\213\020\212\021\215\022\210\001" +
    "\002\000\004\057\141\001\002\000\012\013\uffe0\014\uffe0" +
    "\024\uffe0\067\uffe0\001\002\000\004\057\uffd8\001\002\000" +
    "\006\057\uffd7\065\224\001\002\000\004\057\141\001\002" +
    "\000\012\013\uffe1\014\uffe1\024\uffe1\067\uffe1\001\002\000" +
    "\004\024\ufffd\001\002\000\040\015\216\016\214\017\213" +
    "\020\212\021\215\022\210\026\034\027\043\030\037\031" +
    "\021\032\032\033\041\034\024\035\050\036\022\001\002" +
    "\000\004\063\240\001\002\000\004\063\ufff1\001\002\000" +
    "\004\063\ufff2\001\002\000\054\004\ufff7\007\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\040\ufff7\046\ufff7\055\ufff7\060\ufff7\067\ufff7\001\002\000" +
    "\004\067\006\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\017\014\020\007\021\011\023\006\025\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\014\020" +
    "\007\021\011\023\006\025\232\001\001\000\002\001\001" +
    "\000\014\017\014\020\007\021\011\023\006\025\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\014" +
    "\020\007\021\011\023\006\025\015\001\001\000\002\001" +
    "\001\000\004\022\017\001\001\000\024\003\035\004\044" +
    "\005\022\006\026\010\032\014\024\021\041\023\006\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\035\004\044\005\022\006\161\010\032\014\024\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\152\010\051\014" +
    "\024\001\001\000\010\003\150\010\051\014\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\121\010\051\014\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\050\010\051\014" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\035\004\054\010" +
    "\051\014\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\107\010\051\014\024\001" +
    "\001\000\010\003\106\010\051\014\024\001\001\000\010" +
    "\003\105\010\051\014\024\001\001\000\010\003\104\010" +
    "\051\014\024\001\001\000\010\003\103\010\051\014\024" +
    "\001\001\000\010\003\102\010\051\014\024\001\001\000" +
    "\010\003\101\010\051\014\024\001\001\000\010\003\100" +
    "\010\051\014\024\001\001\000\010\003\077\010\051\014" +
    "\024\001\001\000\002\001\001\000\010\003\076\010\051" +
    "\014\024\001\001\000\010\003\075\010\051\014\024\001" +
    "\001\000\010\003\074\010\051\014\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\035\004\112\010\051\014\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\127\010\051\014\024\001\001" +
    "\000\006\023\125\026\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\131\001\001\000\002\001\001\000\012\003\035\004" +
    "\133\010\051\014\024\001\001\000\002\001\001\000\010" +
    "\003\135\010\051\014\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\141\001\001\000\004\022\144" +
    "\001\001\000\002\001\001\000\004\007\143\001\001\000" +
    "\002\001\001\000\024\003\035\004\044\005\022\006\145" +
    "\010\032\014\024\021\041\023\006\026\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\155\010\051\014\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\175\016\173\027\171\030\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\200\001\001\000\002" +
    "\001\001\000\012\015\175\016\177\027\171\030\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\171\030\205\001\001\000\002\001\001\000\004\013\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\175\016\221\027\171\030\170\001\001\000\002" +
    "\001\001\000\004\011\224\001\001\000\004\013\226\001" +
    "\001\000\004\007\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\230\001\001\000\004\007\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\234" +
    "\013\236\014\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\125" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOp RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Decl> decls = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> vars = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProgramOp(decls,vars,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,var); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefDecl func = (DefDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,func); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= IDefDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int idefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefDecl idef = (DefDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,idef); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls ::= 
            {
              ArrayList<Decl> RESULT =null;
		 ArrayList<Decl> list =new ArrayList<>(); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDefDecl ::= IDEF ID LPAR ParDecls RPAR Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDecl> params = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefDecl(params, new Identifier(id), Type.INTEGER, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDefDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDefDecl ::= IDEF ID LPAR RPAR Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefDecl(new Identifier(id), Type.INTEGER, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDefDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDecl> list = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(var); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecls ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		 ArrayList<VarDecl> list= new ArrayList<>(); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              VarDecl RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VarInit> vars = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeOrCostantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOrCostantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object typeOrCostant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(vars, typeOrCostant); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarInit> list = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new VarInit( new Identifier(id))); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarInit> list = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add( new VarInit(new Identifier(id),expr)); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarsOptInit ::= ID 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VarInit> list = new ArrayList<>(); list.add(new VarInit( new Identifier(id))); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VarInit> list = new ArrayList<>(); list.add(new VarInit( new Identifier(id),expr)); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr constant = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=constant;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT=Type.INTEGER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              Type RESULT =null;
		RESULT=Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT=Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= STRING 
            {
              Type RESULT =null;
		RESULT=Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= CHAR 
            {
              Type RESULT =null;
		RESULT=Type.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= RGB 
            {
              Type RESULT =null;
		RESULT=Type.RGB;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Constant ::= INT_CONST 
            {
              Expr RESULT =null;
		int inttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int intt = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerNode(intt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Constant ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		int doubleeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doubleeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double doublee = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DoubleNode(doublee);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constant ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char charr = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharNode(charr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Constant ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stringg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(stringg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Constant ::= RED 
            {
              Expr RESULT =null;
		 RESULT = new RgbNode("red");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Constant ::= GREEN 
            {
              Expr RESULT =null;
		 RESULT = new RgbNode("green");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Constant ::= BLUE 
            {
              Expr RESULT =null;
		 RESULT = new RgbNode("blue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<ParDecl> params = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new DefDecl(params, new Identifier(id),type,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new DefDecl(new Identifier(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParDecl> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParDecl declaration = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDecl> list = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParDecl)declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParDecls ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl declaration = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ParDecl> list = new ArrayList<>(); list.add(declaration); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ParDecl ::= PVars COLON Type 
            {
              ParDecl RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParVar> list = (ArrayList<ParVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParDecl(type,list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<ParVar> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParVar pvar = (ParVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParVar> list = (ArrayList<ParVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(pvar); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PVars ::= PVar 
            {
              ArrayList<ParVar> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParVar pvar = (ParVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParVar> list = new ArrayList<>(); list.add(pvar); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PVar ::= ID 
            {
              ParVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParVar(false, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PVar ::= REF ID 
            {
              ParVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParVar(true, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ty;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OptType ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOp RESULT =null;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> declarations = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> statements = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new BodyOp(declarations,statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statements ::= Stat Statements 
            {
              ArrayList<Stat> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat statement = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0,(Stat) statement); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statements ::= 
            {
              ArrayList<Stat> RESULT =null;
		 ArrayList<Stat> list = new ArrayList<Stat>(); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= Vars IN SEMI 
            {
              Stat RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> vars_list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new ReadOp(vars_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= Exprs OUT SEMI 
            {
              Stat RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new WriteOp(expression_list,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= Exprs OUTNL SEMI 
            {
              Stat RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new WriteOp(expression_list,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Identifier> vars_list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignOp(vars_list,expression_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int function_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int function_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCall function_call = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=function_call;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp ifBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IfThenNode(expression,ifBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BodyOp ifBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp elseBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenElse(expression,ifBody,elseBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int whileBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp whileBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new WhileOp(expression,whileBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new ReturnStat(exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Vars ::= ID PIPE Vars 
            {
              ArrayList<Identifier> RESULT =null;
		int id_attrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_attrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_attr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new Identifier(id_attr)); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Vars ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Identifier> list = new ArrayList<Identifier>(); list.add(new Identifier(id_attrib)); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr attrib = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add((Expr) attrib); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr attrib = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Expr> list=new ArrayList<Expr>(); list.add((Expr) attrib); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCall RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> ref = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FunCall(new Identifier(id_attrib), ref);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FunCall ::= ID LPAR RPAR 
            {
              FunCall RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new FunCall(new Identifier(id_attrib));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"PLUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"MINUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"TIMES",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"DIV",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"AND",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"OR",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"GT",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"GE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"LT",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"LE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"EQ",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"NE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new UnaryOp("MINUS",e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new UnaryOp("NOT",e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Identifier(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCall e1 = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Constant 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
