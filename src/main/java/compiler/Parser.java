
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.compiler;

import node.defdecl.*;
import node.expr.constant.*;
import node.expr.operation.*;
import node.vardecl.*;
import node.vardecl.*;
import node.expr.*;
import node.program.*;
import node.stat.*;
import node.pardecl.*;
import node.pardecl.*;
import node.vardecl.*;
import node.body.*;
import java.util.ArrayList;
import node.Type;
import java.util.List;
import node.Stat;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\010\000\002\002\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\002\000\002\022\004" +
    "\000\002\022\002\000\002\021\006\000\002\023\005\000" +
    "\002\023\007\000\002\023\003\000\002\023\005\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\020\011\000\002\020\010\000\002\017\005\000\002\017" +
    "\003\000\002\016\005\000\002\030\005\000\002\030\003" +
    "\000\002\027\003\000\002\027\004\000\002\011\004\000" +
    "\002\011\002\000\002\015\003\000\002\015\003\000\002" +
    "\007\006\000\002\006\004\000\002\006\002\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\006" +
    "\000\002\005\004\000\002\005\010\000\002\005\012\000" +
    "\002\005\010\000\002\005\005\000\002\026\005\000\002" +
    "\026\003\000\002\004\005\000\002\004\003\000\002\010" +
    "\006\000\002\010\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\021\005\001\002\000\004\002\236\001" +
    "\002\000\010\013\011\022\ufffd\065\006\001\002\000\010" +
    "\055\235\061\ufff7\062\117\001\002\000\004\061\230\001" +
    "\002\000\010\013\011\022\ufffd\065\006\001\002\000\004" +
    "\065\173\001\002\000\004\022\015\001\002\000\010\013" +
    "\011\022\ufffd\065\006\001\002\000\004\022\ufffe\001\002" +
    "\000\040\004\ufffb\007\ufffb\011\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\041\ufffb" +
    "\050\ufffb\051\ufffb\065\ufffb\001\002\000\040\004\032\007" +
    "\024\011\027\023\uffd9\024\031\025\037\026\035\027\022" +
    "\030\044\031\020\033\040\041\026\050\017\051\043\065" +
    "\034\001\002\000\004\051\162\001\002\000\050\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\052\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\061\uffe9\067\uffe9\070\uffe9\001\002\000" +
    "\042\004\032\007\024\011\027\023\uffd9\024\031\025\037" +
    "\026\035\027\022\030\044\031\020\033\040\041\026\050" +
    "\017\051\043\054\uffd9\065\157\001\002\000\050\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\052\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\061\uffeb\067\uffeb\070\uffeb\001\002\000" +
    "\050\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\052" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\061\uffb8\067\uffb8\070\uffb8" +
    "\001\002\000\004\051\151\001\002\000\004\023\150\001" +
    "\002\000\030\024\031\025\037\026\035\027\022\030\044" +
    "\031\020\033\040\041\026\050\017\051\043\065\047\001" +
    "\002\000\030\024\031\025\037\026\035\027\022\030\044" +
    "\031\020\033\040\041\026\050\017\051\043\065\047\001" +
    "\002\000\042\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9" +
    "\040\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\056\uffb9\057\144\067\uffb9\070\uffb9\001\002\000\050" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee\040\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\052\uffee" +
    "\055\uffee\056\uffee\057\uffee\061\uffee\067\uffee\070\uffee\001" +
    "\002\000\004\051\131\001\002\000\044\032\060\033\054" +
    "\034\064\035\062\037\055\040\070\042\063\043\056\044" +
    "\067\045\061\046\057\047\066\052\uffcc\056\127\057\uffcc" +
    "\067\uffcc\070\uffcc\001\002\000\054\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\037\uffba\040\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\051\050\055\120\056\uffba\060" +
    "\uffce\061\ufff7\062\117\066\uffce\067\uffba\070\uffba\001\002" +
    "\000\050\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\040" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\052\uffec\055\uffec\056\uffec\057\uffec\061\uffec\067\uffec\070" +
    "\uffec\001\002\000\042\004\ufffc\007\ufffc\011\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033" +
    "\ufffc\041\ufffc\050\ufffc\051\ufffc\054\ufffc\065\ufffc\001\002" +
    "\000\050\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\052\uffed\055\uffed\056\uffed\057\uffed\061\uffed\067\uffed\070" +
    "\uffed\001\002\000\030\024\031\025\037\026\035\027\022" +
    "\030\044\031\020\033\040\041\026\050\017\051\043\065" +
    "\047\001\002\000\006\067\112\070\113\001\002\000\006" +
    "\060\106\066\105\001\002\000\030\024\031\025\037\026" +
    "\035\027\022\030\044\031\020\033\040\041\026\050\017" +
    "\051\043\065\047\001\002\000\050\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\047\uffea\052\uffea\055\uffea\056\uffea\057" +
    "\uffea\061\uffea\067\uffea\070\uffea\001\002\000\034\032\060" +
    "\033\054\034\064\035\062\037\055\040\070\042\063\043" +
    "\056\044\067\045\061\046\057\047\066\052\065\001\002" +
    "\000\050\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\052\uffb9\055\uffb9\056\uffb9\057\uffb9\061\uffb9\067\uffb9\070" +
    "\uffb9\001\002\000\052\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\037\uffba\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\050\052\uffba\055\uffba\056\uffba\057\uffba" +
    "\061\uffba\067\uffba\070\uffba\001\002\000\032\024\031\025" +
    "\037\026\035\027\022\030\044\031\020\033\040\041\026" +
    "\050\017\051\043\052\052\065\047\001\002\000\004\052" +
    "\053\001\002\000\050\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\052\uffca\055\uffca\056\uffca\057\uffca\061\uffca" +
    "\067\uffca\070\uffca\001\002\000\050\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\052\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\061\uffcb\067\uffcb\070\uffcb\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\030\024\031" +
    "\025\037\026\035\027\022\030\044\031\020\033\040\041" +
    "\026\050\017\051\043\065\047\001\002\000\050\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\052\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\061\uffbd\067\uffbd\070\uffbd\001\002\000" +
    "\030\024\031\025\037\026\035\027\022\030\044\031\020" +
    "\033\040\041\026\050\017\051\043\065\047\001\002\000" +
    "\030\024\031\025\037\026\035\027\022\030\044\031\020" +
    "\033\040\041\026\050\017\051\043\065\047\001\002\000" +
    "\030\024\031\025\037\026\035\027\022\030\044\031\020" +
    "\033\040\041\026\050\017\051\043\065\047\001\002\000" +
    "\050\032\060\033\054\034\064\035\062\037\055\040\uffc4" +
    "\042\063\043\056\044\067\045\061\046\057\047\066\052" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\061\uffc4\067\uffc4\070\uffc4" +
    "\001\002\000\050\032\060\033\054\034\064\035\062\037" +
    "\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\052\uffc1\055\uffc1\056\uffc1\057\uffc1\061\uffc1\067" +
    "\uffc1\070\uffc1\001\002\000\050\032\060\033\054\034\064" +
    "\035\062\037\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\052\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\061\uffbe\067\uffbe\070\uffbe\001\002\000\050\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\052\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\061\uffc7\067\uffc7\070\uffc7\001\002\000\050" +
    "\032\060\033\054\034\064\035\062\037\uffc3\040\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\052\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\061\uffc3\067\uffc3\070\uffc3\001" +
    "\002\000\050\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\052\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6\067\uffc6" +
    "\070\uffc6\001\002\000\050\032\060\033\054\034\064\035" +
    "\062\037\uffc0\040\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\052\uffc0\055\uffc0\056\uffc0\057\uffc0\061" +
    "\uffc0\067\uffc0\070\uffc0\001\002\000\050\032\uffc9\033\uffc9" +
    "\034\064\035\062\037\uffc9\040\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\061\uffc9\067\uffc9\070\uffc9\001\002\000\050\032" +
    "\060\033\054\034\064\035\062\037\uffbf\040\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\052\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\061\uffbf\067\uffbf\070\uffbf\001\002" +
    "\000\050\032\060\033\054\034\064\035\062\037\uffc2\040" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\052\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\067\uffc2\070" +
    "\uffc2\001\002\000\050\032\060\033\054\034\064\035\062" +
    "\037\uffc5\040\uffc5\042\063\043\056\044\067\045\061\046" +
    "\057\047\066\052\uffc5\055\uffc5\056\uffc5\057\uffc5\061\uffc5" +
    "\067\uffc5\070\uffc5\001\002\000\050\032\uffc8\033\uffc8\034" +
    "\064\035\062\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\052\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\061\uffc8\067\uffc8\070\uffc8\001\002\000\004\057\111" +
    "\001\002\000\030\024\031\025\037\026\035\027\022\030" +
    "\044\031\020\033\040\041\026\050\017\051\043\065\047" +
    "\001\002\000\004\057\110\001\002\000\042\004\uffd5\007" +
    "\uffd5\011\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\033\uffd5\041\uffd5\050\uffd5\051\uffd5\054" +
    "\uffd5\065\uffd5\001\002\000\042\004\uffd8\007\uffd8\011\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\033\uffd8\041\uffd8\050\uffd8\051\uffd8\054\uffd8\065\uffd8" +
    "\001\002\000\004\057\115\001\002\000\004\057\114\001" +
    "\002\000\042\004\uffd6\007\uffd6\011\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\041" +
    "\uffd6\050\uffd6\051\uffd6\054\uffd6\065\uffd6\001\002\000\042" +
    "\004\uffd7\007\uffd7\011\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\041\uffd7\050\uffd7" +
    "\051\uffd7\054\uffd7\065\uffd7\001\002\000\050\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\052\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\061\uffbc\067\uffbc\070\uffbc\001\002\000\030" +
    "\024\031\025\037\026\035\027\022\030\044\031\020\033" +
    "\040\041\026\050\017\051\043\065\047\001\002\000\004" +
    "\065\121\001\002\000\014\055\120\060\uffce\061\ufff7\062" +
    "\117\066\uffce\001\002\000\004\061\ufff9\001\002\000\006" +
    "\060\uffcf\066\uffcf\001\002\000\036\032\060\033\054\034" +
    "\064\035\062\037\055\040\070\042\063\043\056\044\067" +
    "\045\061\046\057\047\066\055\125\061\ufff6\001\002\000" +
    "\004\065\006\001\002\000\004\061\ufff8\001\002\000\030" +
    "\024\031\025\037\026\035\027\022\030\044\031\020\033" +
    "\040\041\026\050\017\051\043\065\047\001\002\000\012" +
    "\052\uffcd\057\uffcd\067\uffcd\070\uffcd\001\002\000\030\024" +
    "\031\025\037\026\035\027\022\030\044\031\020\033\040" +
    "\041\026\050\017\051\043\065\047\001\002\000\034\032" +
    "\060\033\054\034\064\035\062\037\055\040\070\042\063" +
    "\043\056\044\067\045\061\046\057\047\066\052\133\001" +
    "\002\000\004\005\134\001\002\000\004\053\135\001\002" +
    "\000\040\004\ufffb\007\ufffb\011\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\041\ufffb\050\ufffb" +
    "\051\ufffb\054\ufffb\065\ufffb\001\002\000\044\004\uffd3\006" +
    "\137\007\uffd3\011\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\033\uffd3\041\uffd3\050\uffd3\051" +
    "\uffd3\054\uffd3\065\uffd3\001\002\000\004\053\135\001\002" +
    "\000\042\004\uffd2\007\uffd2\011\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\041\uffd2" +
    "\050\uffd2\051\uffd2\054\uffd2\065\uffd2\001\002\000\040\004" +
    "\032\007\024\011\027\024\031\025\037\026\035\027\022" +
    "\030\044\031\020\033\040\041\026\050\017\051\043\054" +
    "\uffd9\065\034\001\002\000\004\054\143\001\002\000\050" +
    "\004\uffdb\006\uffdb\007\uffdb\011\uffdb\013\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\041\uffdb\050\uffdb\051\uffdb\054\uffdb\065\uffdb\001" +
    "\002\000\042\004\uffd4\007\uffd4\011\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\041" +
    "\uffd4\050\uffd4\051\uffd4\054\uffd4\065\uffd4\001\002\000\034" +
    "\032\060\033\054\034\064\035\062\037\055\040\070\042" +
    "\063\043\056\044\067\045\061\046\057\047\066\057\146" +
    "\001\002\000\042\004\uffd0\007\uffd0\011\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0" +
    "\041\uffd0\050\uffd0\051\uffd0\054\uffd0\065\uffd0\001\002\000" +
    "\050\032\060\033\054\034\064\035\062\037\uffbb\040\uffbb" +
    "\042\063\043\056\044\067\045\061\046\057\047\066\052" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb\067\uffbb\070\uffbb" +
    "\001\002\000\004\002\001\001\002\000\030\024\031\025" +
    "\037\026\035\027\022\030\044\031\020\033\040\041\026" +
    "\050\017\051\043\065\047\001\002\000\034\032\060\033" +
    "\054\034\064\035\062\037\055\040\070\042\063\043\056" +
    "\044\067\045\061\046\057\047\066\052\153\001\002\000" +
    "\004\010\154\001\002\000\004\053\135\001\002\000\042" +
    "\004\uffd1\007\uffd1\011\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\041\uffd1\050\uffd1" +
    "\051\uffd1\054\uffd1\065\uffd1\001\002\000\006\023\uffda\054" +
    "\uffda\001\002\000\050\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\037\uffba\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\050\055\160\056\uffba\060\uffce\066\uffce" +
    "\067\uffba\070\uffba\001\002\000\004\065\161\001\002\000" +
    "\010\055\160\060\uffce\066\uffce\001\002\000\006\063\164" +
    "\064\165\001\002\000\004\056\166\001\002\000\004\056" +
    "\uffdd\001\002\000\004\056\uffdc\001\002\000\004\065\167" +
    "\001\002\000\004\056\170\001\002\000\030\024\031\025" +
    "\037\026\035\027\022\030\044\031\020\033\040\041\026" +
    "\050\017\051\043\065\047\001\002\000\004\052\172\001" +
    "\002\000\050\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7" +
    "\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\052\uffb7\055\uffb7\056\uffb7\057\uffb7\061\uffb7\067\uffb7" +
    "\070\uffb7\001\002\000\004\051\174\001\002\000\010\012" +
    "\200\052\202\065\175\001\002\000\006\056\uffe1\061\uffe1" +
    "\001\002\000\004\061\225\001\002\000\006\056\223\061" +
    "\uffe2\001\002\000\004\065\222\001\002\000\004\052\217" +
    "\001\002\000\006\053\uffde\061\206\001\002\000\006\052" +
    "\uffe5\057\204\001\002\000\006\012\200\065\175\001\002" +
    "\000\004\052\uffe6\001\002\000\014\014\216\015\214\016" +
    "\213\017\211\020\215\001\002\000\004\053\135\001\002" +
    "\000\010\013\uffe7\022\uffe7\065\uffe7\001\002\000\010\052" +
    "\ufff0\053\ufff0\057\ufff0\001\002\000\004\053\uffdf\001\002" +
    "\000\010\052\ufff1\053\ufff1\057\ufff1\001\002\000\010\052" +
    "\ufff2\053\ufff2\057\ufff2\001\002\000\010\052\uffef\053\uffef" +
    "\057\uffef\001\002\000\010\052\ufff3\053\ufff3\057\ufff3\001" +
    "\002\000\006\053\uffde\061\206\001\002\000\004\053\135" +
    "\001\002\000\010\013\uffe8\022\uffe8\065\uffe8\001\002\000" +
    "\006\056\uffe0\061\uffe0\001\002\000\006\012\200\065\175" +
    "\001\002\000\004\061\uffe3\001\002\000\014\014\216\015" +
    "\214\016\213\017\211\020\215\001\002\000\006\052\uffe4" +
    "\057\uffe4\001\002\000\004\022\uffff\001\002\000\030\014" +
    "\216\015\214\016\213\017\211\020\215\024\031\025\037" +
    "\026\035\027\022\030\044\031\020\001\002\000\004\057" +
    "\ufff5\001\002\000\004\057\234\001\002\000\004\057\ufff4" +
    "\001\002\000\046\004\ufffa\007\ufffa\011\ufffa\013\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\033\ufffa\041\ufffa\050\ufffa\051\ufffa\054\ufffa\065" +
    "\ufffa\001\002\000\004\065\006\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\020\012\021\007\023\006\025\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\012\021\007\023" +
    "\006\025\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\012\021\007\023\006\025\013\001\001\000" +
    "\002\001\001\000\004\022\015\001\001\000\024\003\032" +
    "\004\040\005\020\006\024\010\027\014\022\021\035\023" +
    "\006\026\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\032\004\040\005\020\006\155\010\027\014" +
    "\022\026\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\146\010" +
    "\045\014\022\001\001\000\010\003\144\010\045\014\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\115\010" +
    "\045\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\044\010\045\014\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\032\004\050\010\045\014\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\103\010\045\014\022\001\001\000\010\003\102\010" +
    "\045\014\022\001\001\000\010\003\101\010\045\014\022" +
    "\001\001\000\010\003\100\010\045\014\022\001\001\000" +
    "\010\003\077\010\045\014\022\001\001\000\010\003\076" +
    "\010\045\014\022\001\001\000\010\003\075\010\045\014" +
    "\022\001\001\000\010\003\074\010\045\014\022\001\001" +
    "\000\010\003\073\010\045\014\022\001\001\000\002\001" +
    "\001\000\010\003\072\010\045\014\022\001\001\000\010" +
    "\003\071\010\045\014\022\001\001\000\010\003\070\010" +
    "\045\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\032\004\106\010\045" +
    "\014\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\123\010\045\014\022\001\001\000\006\023\121\026\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\125\001\001\000\002" +
    "\001\001\000\012\003\032\004\127\010\045\014\022\001" +
    "\001\000\002\001\001\000\010\003\131\010\045\014\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\135\001\001\000\004\022\140\001\001\000\002\001\001" +
    "\000\004\007\137\001\001\000\002\001\001\000\024\003" +
    "\032\004\040\005\020\006\141\010\027\014\022\021\035" +
    "\023\006\026\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\151\010" +
    "\045\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\122\001\001\000\002" +
    "\001\001\000\004\015\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\032\004\170\010\045\014\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\202\017\200\027\176\030\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\206\001\001\000" +
    "\002\001\001\000\012\016\202\017\204\027\176\030\175" +
    "\001\001\000\002\001\001\000\004\013\211\001\001\000" +
    "\004\007\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\217\001\001" +
    "\000\004\007\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\176\030\223\001\001\000\002\001\001" +
    "\000\004\013\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\231\013\230\014\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\121\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOp RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Decl> decls = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> vars = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProgramOp(decls,vars,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,var); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<Decl> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefDecl func = (DefDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Decl> list = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0,func); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<Decl> RESULT =null;
		 ArrayList<Decl> list =new ArrayList<>(); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDecl> list = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(var); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		 ArrayList<VarDecl> list= new ArrayList<>(); RESULT=list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              VarDecl RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VarInit> vars = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeOrCostantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOrCostantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object typeOrCostant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(vars, typeOrCostant); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarInit> list = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new VarInit( new Identifier(id))); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarInit> list = (ArrayList<VarInit>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add( new VarInit(new Identifier(id),expr)); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VarInit> list = new ArrayList<>(); list.add(new VarInit( new Identifier(id))); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<VarInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VarInit> list = new ArrayList<>(); list.add(new VarInit( new Identifier(id),expr)); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr constant = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=constant;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT=Type.INTEGER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Type RESULT =null;
		RESULT=Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT=Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Type RESULT =null;
		RESULT=Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Type RESULT =null;
		RESULT=Type.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Expr RESULT =null;
		int inttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int intt = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerNode(intt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		int doubleeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doubleeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double doublee = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DoubleNode(doublee);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int charrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char charr = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharNode(charr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stringg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringNode(stringg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<ParDecl> params = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new DefDecl(params, new Identifier(id),type,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new DefDecl(new Identifier(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParDecl> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParDecl declaration = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDecl> list = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParDecl)declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl declaration = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ParDecl> list = new ArrayList<>(); list.add(declaration); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              ParDecl RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParVar> list = (ArrayList<ParVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParDecl(type,list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<ParVar> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParVar pvar = (ParVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParVar> list = (ArrayList<ParVar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(pvar); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<ParVar> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParVar pvar = (ParVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParVar> list = new ArrayList<>(); list.add(pvar); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              ParVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParVar(false, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              ParVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParVar(true, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ty;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MOp ::= ADD 
            {
              String RESULT =null;
		RESULT="ADD";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MOp ::= MUL 
            {
              String RESULT =null;
		RESULT="MUL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOp RESULT =null;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> declarations = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> statements = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new BodyOp(declarations,statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statements ::= Stat Statements 
            {
              ArrayList<Stat> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat statement = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0,(Stat) statement); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statements ::= 
            {
              ArrayList<Stat> RESULT =null;
		 ArrayList<Stat> list = new ArrayList<Stat>(); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Vars IN SEMI 
            {
              Stat RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> vars_list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new ReadOp(vars_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Exprs OUT SEMI 
            {
              Stat RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new WriteOp(expression_list,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= Exprs OUTNL SEMI 
            {
              Stat RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new WriteOp(expression_list,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Identifier> vars_list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> expression_list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignOp(vars_list,expression_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int function_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int function_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCall function_call = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=function_call;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp ifBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IfThenNode(expression,ifBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BodyOp ifBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp elseBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenElse(expression,ifBody,elseBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int whileBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp whileBody = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new WhileOp(expression,whileBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new ReturnStat(exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Vars ::= ID PIPE Vars 
            {
              ArrayList<Identifier> RESULT =null;
		int id_attrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_attrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_attr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> list = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new Identifier(id_attr)); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Vars ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Identifier> list = new ArrayList<Identifier>(); list.add(new Identifier(id_attrib)); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr attrib = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add((Expr) attrib); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr attrib = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Expr> list=new ArrayList<Expr>(); list.add((Expr) attrib); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCall RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> ref = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FunCall(new Identifier(id_attrib), ref);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCall ::= ID LPAR RPAR 
            {
              FunCall RESULT =null;
		int id_attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new FunCall(new Identifier(id_attrib));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"PLUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"MINUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"TIMES",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"DIV",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"AND",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"OR",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"GT",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"GE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"LT",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"LE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"EQ",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOp(e1,"NE",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new UnaryOp("MINUS",e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new UnaryOp("NOT",e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Identifier(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCall e1 = (FunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Constant 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= MAP LPAR MOp COMMA ID COMMA Exprs RPAR 
            {
              Expr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fun = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> args = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ArrayList<FunCall> funCallArrayList= new ArrayList<>();
                                                                        for (int i=0; i<args.size(); i++){
                                                                            ArrayList<Expr> argList = new ArrayList<Expr>();
                                                                            argList.add(args.get(i));
                                                                            funCallArrayList.add(new FunCall(new Identifier(fun), argList));
                                                                        }
                                                                        RESULT=new MapOp(op, funCallArrayList);
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
